import { actions, useAppState } from '../../context/AppStateContext';
const { state, dispatch } = useAppState();

- Can you get audio data from youtube or another source? https://github.com/liwa-dev/YTAudioConverterAPI
	https://www.npmjs.com/package/ytdl-core
	https://medium.com/@pritubera/how-i-made-a-youtube-audio-downloader-using-node-js-and-react-js-c51bb757bbbf

- no resizeable container icon, and app should take up proportional space depending on screen size. 

- on initial screen positioning or objects and hide seek handle

- hide scrollbar of playhead container
- chord analysis on bottom 
- midi nodes are held when pausing, something even after stopping


- position playhead 
	- what if you have 2 of them? one in waveform, one in midi? 
	- or overlay container?
	- you can't link it to scrolling position because it's terrible without debouncing. 
	- what if you have a separate scrollable container whose scroll is linked to the main container, so you draw on top of it? 
- hitting pause doesn't stop midi current notes

- WaveformSVG.tsx:39 - scroll of waveform container is being set every time waveformScrollPosition, changes. 


- extract chord symbols 


Finetuning playback
- waveform is crossing itself at beginning and end

- set up CI/CDf


Typescript cheat sheet:
	onClickHandler: (e: React.MouseEvent<HTMLButtonElement>) => void;
	

waveform grey 423c3b
background grey 161616
play red df4440
timecode grey 2e2e2e
playhead blue 02b0fe


Features
- Select a portion of the waveform to see an average of values
- Playback auto-updates values.
- Data to display:
	- Volume
	- Pitch percentage
- Cool visualization.
	- Shows volume and pitch content using different params.
- Listen to microphone input and react.

Advanced Features
- Can you generate chord progression?
- Can you generate sheet music based on this? 

Issues
- Optimizing visualization of waveform?
- 


brightred f52c40
darkred 800924
maroon 512330
navy 232e45
darkgrey 161616